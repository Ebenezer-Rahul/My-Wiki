
= Types =

My Understanding of types was intially based on structs from c. 

Formalizing my understanding it's like 
- *type is a set of values*
- Example _a set of all integers from -pow(2, 31) to pow(2, 31) - 1. -> int_
- _set of true, false -> boolen type_
- _{x* | x belongs to chars union epsilon } -> string_


This way of thinking about types I think works in functional paradiams. 
Thinking of types this way helps in thinking about compostion of function etc..

*But Object Oriented Languages require you to think of type in a different way*

Here Type is thought of as set operations|requests|methods 

we say an object is of type T if the object supports all the operations in T

So a single object can be many types T1, T2 etc..

I do think this way of understaning types helps to write more naturally in object oriented languages

I think go defines types this way.

But in c++ this way of thinking won't always work. due to fact of object slicing etc.. but we just limit
to thinking of types this way for purly abstract classes {I mean like an interface in Java} in c++ . 
This way of reasong about code certainly helps designing good applications

